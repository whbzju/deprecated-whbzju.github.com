<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[知行录]]></title>
  <link href="http://whbzju.github.com/atom.xml" rel="self"/>
  <link href="http://whbzju.github.com/"/>
  <updated>2013-03-24T00:34:43+08:00</updated>
  <id>http://whbzju.github.com/</id>
  <author>
    <name><![CDATA[阿波]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[mac test]]></title>
    <link href="http://whbzju.github.com/blog/2013/03/24/mac-test/"/>
    <updated>2013-03-24T00:33:00+08:00</updated>
    <id>http://whbzju.github.com/blog/2013/03/24/mac-test</id>
    <content type="html"><![CDATA[<h1>Mac</h1>

<p>Just for Mac test</p>

<h1>中文</h1>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress custom-configuration 个性化配置]]></title>
    <link href="http://whbzju.github.com/blog/2013/03/01/octopress-custom-config/"/>
    <updated>2013-03-01T09:25:00+08:00</updated>
    <id>http://whbzju.github.com/blog/2013/03/01/octopress-custom-config</id>
    <content type="html"><![CDATA[<h1>概述</h1>

<p>我使用的octopress默认的主题，但是它的一些页面设置不能满足我的需求。比如：</p>

<ul>
<li>导航栏</li>
<li>个人介绍页面</li>
<li>分类Categories</li>
<li>sina微薄分享</li>
<li>评论</li>
</ul>


<p>好在octopress的可定制性非常强，其核心配置文件叫 `_config.yml,  基本上的配置都需要用到这个文件。它的逻辑比较简单，blog所有的配置都在这个文件，它的基本格式如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Disqus Comments
</span><span class='line'>disqus_short_name: 
</span><span class='line'>disqus_show_comment_count:</span></code></pre></td></tr></table></div></figure>


<p>这是一个第三方的评论插件，通过简单的设置即可实现blog中加入评论。注意，该文件是基于yaml语法，：后面的空格不能省略。该文件还有许多其他的参数可以配置，其中本文主要关注的是：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># list each of the sidebar modules you want to include, in the order you want them to appear.
</span><span class='line'># To add custom asides, create files in /source/_includes/custom/asides/ and add them to the list like 'custom/asides/custom_aside_name.html'
</span><span class='line'>default_asides: [asides/about.html, asides/weibo.html, asides/category_list.html, asides/recent_posts.html, asides/github.html, asides/twitter.html, asides/delicious.html, asides/pinboard.html, asides/googleplus.html]</span></code></pre></td></tr></table></div></figure>


<p>如注释中提到，asides的设置，关联的目录在<code>/source/\_includes/custom/asides</code>。比如想要在右侧边栏中加入about me框，则需要在<code>/source/\_includes/custom/asides/</code>中新建about.html。建议借用该目录下默认的about.html。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;section&gt;
</span><span class='line'>  &lt;h1&gt;About Me&lt;/h1&gt;
</span><span class='line'>  &lt;p&gt;A little something about me.&lt;/p&gt;
</span><span class='line'>&lt;/section&gt;</span></code></pre></td></tr></table></div></figure>


<h1>配置方法</h1>

<p>博主的自定义主要参考网络上的几篇blog，在这里不再详述，实现的功能有:</p>

<ul>
<li>octopress navigation设置</li>
<li>about页面，需要用rake new_page[&#8220;about&#8221;]，先生成页面。</li>
<li>octopress 侧边栏设置</li>
<li>个人介绍</li>
<li>sina微博分享</li>
<li>categories</li>
<li>google analysis</li>
</ul>


<h1>参考文献</h1>

<p><a href="http://yanping.me/cn/blog/2012/01/07/theming-and-customization/">ctopress修改主题和自定义样式</a></p>

<p><a href="http://linyi.herokuapp.com/blog/config-octopress.html">octopress的个性化配置</a></p>

<p><a href="http://codemacro.com/2012/07/18/add-category-list-to-octopress/">为octopress添加分类(category)列表</a></p>

<p><a href="http://programus.github.com/blog/2012/03/03/add-weibo-sidebar-into-octopress/">为Octopress博客追加新浪微博侧栏</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Orange's一个操作系统的实现---心得与体会]]></title>
    <link href="http://whbzju.github.com/blog/2013/02/23/tryos-xindetihui/"/>
    <updated>2013-02-23T15:57:00+08:00</updated>
    <id>http://whbzju.github.com/blog/2013/02/23/tryos-xindetihui</id>
    <content type="html"><![CDATA[<h1>前言</h1>

<p>本科的时候，室友有一本《自己动手写操作系统》，曾拿来翻了一翻，觉得十分有趣，可惜当时要应付考研，没有时间好好看这本书。后来读研之后，马上入了一本，不过此时该书已经是第二版，叫《Orange&#8217;s 一个操作系统的实现》，却因自己畏难和拖延不决，一直到今天，马上要毕业了从把此书匆匆过了一遍。
不得不说，佩服作者的功力和心态，作者像是一个小孩，认真的为大家讲述他心爱的玩具是如何搭建的。在如今，实现一个这样的操作系统，并没有什么使用价值，只能作为学习的demo。为了搭建这个玩具，作者需要去了解x86架构的运行原理，内存的分页分段实现机制，8259A中断控制的部分原理和使用方法，还有文件系统、硬盘等等，我想当当是阅读这些设备组件的文档，就要耗去许多功夫，更别说调试的功夫。故在这种没有外界事物驱动的项目，若非有极大的热忱，是无论如何也坚持不下去。而我却连读完这本书这件事情都拖了3年，想来真是惭愧。</p>

<h1>内容概述</h1>

<p>整本书分为上下两篇，上篇的内容更为底层一些，因为本书是真正实现一个系统，所以上篇中有很多内容是有关硬件细节的，需要一定的汇编基础。下篇的内容则和我们平时接触的操作系统书籍有些类似，像IPC、文件系统、内存管理等更高级的话题，以C语言实现为主，也有部分汇编代码。内容大致分为：
* 环境搭建&#8212;bochs、linux
* cpu相关&#8212;引导扇区、保护模式
* 内核相关&#8212;内核雏形、进程、输入输出
* 进程通信IPC
* 文件系统&#8212;硬盘驱动和简单的文件系统
* 内存管理&#8212;fork、MM的简单实现
* 让OS能够部署到真正的机器中
本文变不打算重复书中的实现细节，因为文字没有代码讲的清楚，作者的代码带有大量的注释，所有的细节都在其中。</p>

<hr />

<h2>环境搭建</h2>

<p>网上对bochs的环境配置有很多资料，作者使用的bochsrc在ubuntu下需要做些简单的修改。具体的配置过程也可以参照我的另一篇blog：<a href="http://whbzju.github.com/blog/2013/02/04/bochs-config/">Ubuntu 12.04安装bochs 2.3.5</a>.</p>

<h2>cpu相关</h2>

<p>第三章保护模式的内容是整本书的基础。后续章节讨论的内容都需要以此章的知识为基础。若你想深入了解操作系统实现的细节，本章是必须掌握的内容，当然如果你在本章遇到了困难，也可以先看后续章节，通过后续章节的知识来反馈本章的内容，也是一条可行之路，譬如博主就是这样做的。知识需要时间的沉淀，可能当时你很难理解的内容，过了一阵子，在其他知识的帮助下，你可以很顺利的理解它。然而，本章的内容你是无法糊弄过去，否则将会成为你理解是后续章节内容的傍脚石。
其中，保护模式的概念理解是一个坎，去网上了解下cpu发展的历史和相应的保护模式介绍内容将有助于你了解它。在理解概念后，书中所讲的只是如何通过汇编来使cpu进入保护模式而已，没有其他障碍。接着是整个操作系统运行原理的基石，分别为特权集的变化(特别是在变换时栈的变化)、中断的原理（8259A芯片的操作）和GDT、LDT、页式存储等一些重要的概念。</p>

<h2>内核相关</h2>

<p>在前面的章节中，我们写的程序是直接在引导程序中，而一个操作系统必然是要运行其他程序的，那么，自然要实现我们自己的内核。而一个操作系统从开机到运行。</p>

<blockquote><p>大致经历“引导&#8212;>加载内核入内存&#8212;>跳入保护模式&#8212;>开始执行内核”。</p></blockquote>

<p>这样看来引导区扇的512字节很可能不够，所以有必要实现一个loader来加载内核。第四章重点介绍了FAT12和loader的实现。第五章开始讲述内核的实现，其中一个重要的概念是ELF，类似于一种标准，告诉loader怎么加载程序。该章最后在内核中加入中断，这样一个内核雏形就完成了。第六章的讲述的是进程，操作系统中最重要的概念。在实现进程，除了我们已经了解的进程表的设置和进程调度算法外，本章提到的进程切换的特权集变换和栈空间的变换值得学习。当然，本章还实现了多线程，利用cpu时钟中断的机制实现。最后是系统调用，这里面涉及到讨论宏内核和微内核的内容，作者的选择是微内核。第七章是输入输出的内容，我兴趣不大，一带而过了。</p>

<h2>进程通信IPC</h2>

<p>本章节的内容没什么好说的，由于作者采用微内核，故在实现IPC时，需要有类似与MM的系统调用。</p>

<h2>文件系统</h2>

<p>一开始是对硬盘的介绍，目的是要实现一个硬盘的驱动程序。接着对文件系统的核心数据结构进行设计，见代码。</p>

<h2>内存管理</h2>

<p>内存管理本来是我十分感兴趣的一章，但是本书对该部分的内容算是浅尝而至，没有达到我对他的期望。不过，关于内存分配的细节还是能通过本章的例子了解不少。不过，本章的最后实现了一个简单的shell，算是一个补偿。</p>

<h2>尾声</h2>

<p>在书本的最后，作者将自己的操作系统安装到真正的机器中，作为本书的结尾。</p>

<h1>总结</h1>

<p>整本书读下来，虽然有不少知识点我不感兴趣，囫囵吞枣般的过去了，还是有不少收获。特别是对中断、栈空间、进程的理解有了进一步，下一步阅读有关操作系统方面经典的书籍应该会有不一样的体会，而且为我后面了解linux内核和android系统源码应该有不少帮助，这样我的目的也就达到了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ubuntu 12.04安装bochs 2.3.5]]></title>
    <link href="http://whbzju.github.com/blog/2013/02/04/bochs-config/"/>
    <updated>2013-02-04T23:37:00+08:00</updated>
    <id>http://whbzju.github.com/blog/2013/02/04/bochs-config</id>
    <content type="html"><![CDATA[<p>一直对操作系统本身抱有一定的崇拜心理，可是长久以来都没有好好专研下这本书。趁着工作之前的最后一个寒假，希望能顺利完成这本书，对操作系统的认识有一个新的认识。</p>

<blockquote><p>工欲善其事，必先利其器
首先，我们先要配置出书本中模拟实验的环境，即虚拟机bochs的配置。众所周知，bochs的安装包版本是不带有调试功能的，只有通过编译bochs源码，才能启用debug模式。</p></blockquote>

<h2>bochs 2.3.5源码编译</h2>

<p>网上编译bochs的资料非常多，基本的问题都有解决方案，我重点讲不常见的问题。
<strong>基本安装步骤</strong></p>

<pre><code>tar vxzf bochs-2.3.5.tar.gz
cd bochs-2.3.5
sudo ./configure --enable-debugger --enable-disasm
sudo make
sudo make install
</code></pre>

<p>bochs是c++实现的，因此其依赖环境会有build-esstianl g++ devlib等，需事先安装环境</p>

<pre><code>sudo apt-get install build-essential
sudo apt-get install xorg-dev //GUI界面
sudo apt-get install bison
</code></pre>

<p>在执行./configure时，出现apt-get orgx-dev后依旧出现仍然提示<em>ERROR: X windows gui was selected, but X windows libraries were not found</em>
采用解决办法：</p>

<blockquote><p>只要编译的时候连接了 -lX11这个库就可以了，所以可以让configure阶段出错的地方不退出，并且在make的时候link X11这个库，编辑configure, 将退出的地方注释掉</p>

<pre><code>echo ERROR: X windows gui was selected, but X windows libraries were not found.
    #exit 1
</code></pre></blockquote>

<pre><code>configure命令后加 LDFLAGS="-L/usr/lib/i386-linux-gnu -lX该问题不能用--with-nogui解决，否则无法输出hello os，因为需要使用gui
</code></pre>

<p><strong>make</strong>之前需要修改一份文件bx_debug/symbol.cc</p>

<pre><code>在97行之后加入代码如下,
using namespace std;

#ifdef __GNUC__ //修改
using namespace __gnu_cxx; //修改
#endif //修改

struct symbol_entry_t
</code></pre>

<p>keymap若提示找不到，注释掉即可。</p>

<h2>bochsrc</h2>

<p>bochsrc是bochs启动时读取配置的文件，其中关键的是romimage和vgaromimage的路径设置。关于rom，install vagbios后，/usr/share/bochs路径存在，romimage路径在ubuntu下：/usr/local/share/bochs，修改下即可</p>

<h2>制作引导盘</h2>

<p>用bximage制作软盘映像
<code>bximage
按提示制作
将引导扇区写入软盘
</code>dd if=boot.bin of=a.img bs=512 count=1 conv=notrunc</p>

<h2>启动bochs</h2>

<p>终端中输入bochs，按提示输入，在debug模式下，需要输入c让程序运行。若一切顺利，能看到屏幕上输出hello os的字符。</p>

<h2>关于64位机子的问题</h2>

<p>在configure时，enable-long-phy-address不存在，无法顺利支持64位寻址，需进一步研究确认。</p>

<h2>诡异问题</h2>

<p>依旧还有unknow VEG error，不知道怎么解决。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu 12.04配置Octopress在Github上搭建blog]]></title>
    <link href="http://whbzju.github.com/blog/2013/02/02/octopress-peizhi/"/>
    <updated>2013-02-02T11:04:00+08:00</updated>
    <id>http://whbzju.github.com/blog/2013/02/02/octopress-peizhi</id>
    <content type="html"><![CDATA[<p>  至从看到同学在Github上搭建的blog，深以为这才是我想要的blog，简洁漂亮，静态页面，离线编辑，markdown文档写作格式，git版本控制。所以当论文的事情告一段落，终于有时间来折腾它。起初，我在window平台上搭建，参考该<a href="http://shanewfx.github.com/blog/2012/02/16/bulid-blog-by-octopress/">文献</a>配置，其中最大的问题是中文字符支持的问题。</p>

<h2>内容概述</h2>

<ul>
<li>ubuntu 12.04配置octopress和github Page</li>
<li>git 配置问题，ssh key管理。</li>
<li>维护已经存在的github blog</li>
<li>vim的markdown语法高亮插件设置和所见即所得设置</li>
</ul>


<h2>ubuntu 12.04配置octopress和github Page</h2>

<p>  首先，我们来了解下概念问题，关于octopress，可以见下文：</p>

<blockquote><p>Octopress is a blogging framework which generates your enire blog in static files. Octopress has integrated Twitter, Google Analytics, Google Plus, Facebook and some other webservices. There are also good plugins for adding images, code, videos and other content into your blog posts. The framework is made for hackers and people who know something about Linux and shell.There are three official ways to deploy Octopress
Github Pages
Heroku
Rsync</p></blockquote>

<p>大致的意思是说octopress是一个静态页面生成框架，具有一些列集成的功能。有三种发布方式：Github Pages，Heroku和Rsync，本文采用Github Pages。由于Octopress是基于Ruby实现，我对ruby没有接触，从别人blog中了解到一下关于ruby的几个重要概念</p>

<blockquote><p>Gem ruby的easy install，用来安装各种库，是用ruby写的，全称叫rubygems。
Bundler 基于gem的更高级管理工具，bundler相对于gem就好比apt-get相对于aptitude。不过他不是单纯的下载安装，他会根据本目录的Gemfile文件，把你缺少的包给装上。
Rvm Ruby Version Manager，用来安装各种版本的ruby，问题是ubuntu有apt-get，这个不大派上用场。
Rbenv Simple Ruby Version Management，也是用来安装各种版本的ruby。
Rake Ruby Make，顾名思义就是ruby写的make，他对应的Makefile是Rakefile</p></blockquote>

<!--more-->


<h3>配置安装环境</h3>

<p>ubuntu在默认环境下是没有octorpess的依赖环境，同时也缺少git工具。所以首先：</p>

<pre><code>sudo apt-get install bash curl git-core -y
sudo apt-get install build-essential bison openssl libreadline6 libreadline6-dev zlib1g zlib1g-dev libssl-dev libyaml-dev libsqlite3-0 libsqlite3-dev sqlite3 libxml2-dev libxslt-dev autoconf libc6-dev ncurses-dev automake -y
</code></pre>

<p>接着安装rvm，我们采用rvm来安装ruby和octopress的依赖环境。
<code>bash -s stable &lt; &lt;(curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer)</code>
同时我们还需要配置bash的环境，并重启bash</p>

<pre><code>echo '[[ -s "$HOME/.rvm/scripts/rvm" ]] &amp;&amp; . "$HOME/.rvm/scripts/rvm" # Load RVM function' &gt;&gt; ~/.bashrc
source .bashrc
</code></pre>

<p>然后，配置octopress的环境：</p>

<pre><code>rvm pkg install openssl
rvm pkg install iconv
rvm install 1.9.2 -C --with-openssl-dir=$HOME/.rvm/usr,--with-iconv-dir=$HOME/.rvm/usr
rvm use 1.9.2 --default
rvm reload
rvm rubygems latest
gem install bundler
</code></pre>

<p>注意ubuntu 12.04默认的ruby版本是1.8.7，所以运行完上述命令务必要确认`ruby &#8211;version 来确认ruby的版本是否依旧修改成功。</p>

<h3>clone octopress</h3>

<pre><code>git clone git://github.com/imathis/octopress.git octopress

cd octopress/
</code></pre>

<h3>安装octopress</h3>

<p>安装octopress依赖环境</p>

<pre><code>gem install bundler
bundle install
</code></pre>

<p>安装octopress默认主题</p>

<pre><code>rake install
</code></pre>

<h3>部署到Github</h3>

<p>部署过程比较简单，每一步都有详细的提示。首先你得现在github上创建一个repository，且必须命名成username.github.com.git，其中username是你的github的用户名，参见<a href="http://beiyuu.com/github-pages/">用Github Pages搭建blog设置</a>。要注意的是ssh的管理，直接在github账户上添加ssh密钥，该密钥是作为deploy密钥，因此不能用于其他项目，也就是说，如果此时你有其他项目需要ssh密钥，该密钥已经不能被使用，你必须通过ssh-keygen重新生成密钥，并且通过ssh-agent进行切换。</p>

<p>用octopress写blog主要的步骤如下：</p>

<pre><code>rake new_post["title"]
rake generate
</code></pre>

<p>这样静态页面就生成好了，可以通过<code>rake preview</code>来预览，访问<code>localhost:4000</code>进行测试。</p>

<p>没有问题就可以通过<code>rake deploy</code>部署到github上。</p>

<p>同时，不要忘了将source分支也上传到github上，依照默认的octopress配置，它是将source和master分开，在source分支下完成文章编写，通过deploy到master中，默认情况下github上只有master分支。但是如果你有多台电脑，需要维护一个github blog，其他电脑必须checkout 该项目的source分支才能进行修改，否则会出错。因此，必须将source分支也加入到项目目录中</p>

<pre><code>git add .
git commit -m "origin source branch"
git push origin source
</code></pre>

<p>如果一切正常，过一会你就可以通过`username.github.com来访问你的blog。</p>

<h3>octopress主题安装</h3>

<p>我个人觉得默认主题不错，各位也可以安装其他主题，google吧。</p>

<h2>维护一个已经存在的github blog</h2>

<p>首先，在机子上配置ruby环境，rvm，git和octopress的环境。</p>

<p>接着从github上clone你的blog项目，比如：</p>

<pre><code>git clone git@github.com:username/username.github.com.git
</code></pre>

<p>checkout source分支，这个是必须的步骤</p>

<pre><code>cd username.github.com
git checkout source
</code></pre>

<p>重新配置本地octopress和Github Page的关联</p>

<pre><code>rake setup_github_pages
</code></pre>

<p>按提示完成设置</p>

<p>接着便于初次配置octopress一样的方式进行blog编写修改等。</p>

<h2>markdown编辑器的配置：VIM</h2>

<p>   在linux平台上，vim是我首选的编辑器，不想换其他专门针对markdown语法的编辑器。在写blog的时候，我希望编辑器能够有两个功能:</p>

<ul>
<li>支持markdown语法高亮</li>
<li>支持所见即所得模式编辑</li>
</ul>


<p>google了下发现，可以通过安装vim-octopress和vim-instant-markdown插件来实现。</p>

<h3>vim-octopress配置</h3>

<p>   建议采用<a href="https://github.com/tpope/vim-pathogen">Pathogen</a>来安装vim插件。</p>

<pre><code>cd ~/.vim/bundle
git clone https://github.com/tangledhelix/vim-octopress.git octopress
</code></pre>

<p>  若是没有设置过vim，先新建<code>~/.vimrc</code>和 <code>~/.vim/</code> 。最后在<code>.vimrc</code> 中加入，指定markdown的配色为octopress</p>

<pre><code>autocmd BufNewFile,BufRead *.markdown setfiletype octopress
</code></pre>

<h3>vim-instant-markdown插件配置</h3>

<p>  该插件的功能是让你在撰写markdown文档时能立即看到成文效果，在安装完毕后，使用vim时自动启动浏览器，实时的展现你撰写的内容。安装步骤见项目的github<a href="https://github.com/suan/vim-instant-markdown">主页</a>。我在安装该插件的时候遇到一些问题，还在解决中，希望能尽快使用它。</p>

<h2>总结&amp;展望</h2>

<p>  在折腾这个blog，分别在windows上和linux上都安装成功过，window上的中文字符集解决方法比较麻烦。linux下只要将语言设置到.bashrc即可。整个过程遇到多个ssh key管理问题，最后在github的help上找到ssh agent切换管理解决方案。ruby version不对，原因是ubuntu默认ruby版本为1.8.7，需要设置。在修改octopress中的其他文件，在git push时，需要用git add/rm 来处理这些文件后push。Github在build pages失败时，会有邮件提示错误原因，需要仔细看。
  总之，遇到问题先思考，有了思路后再针对性的查阅资料，尝试解决方案。</p>

<h3>接下来要解决的：</h3>

<ul>
<li>评论机制</li>
<li>代码高亮</li>
<li>主题修改</li>
<li>配置修改，config.yml文件等</li>
</ul>


<h2>参考</h2>

<p><a href="http://www.lennu.net/2012/05/11/octopress-installation-in-ubuntu-12-dot-04-with-rsync/">Octopress installation in Ubuntu 12.04 with rsync - Lennu.net</a></p>

<p><a href="http://xingfuqiu.com/blog/ubuntu-update-to-1204/">为已存在的Octopress配置环境</a></p>

<p>http://fancyoung.com/blog/octopress-study/</p>

<p>http://netwjx.github.com/blog/2012/03/18/octopress-note/</p>

<p>http://BeiYuu.com</p>

<p><a href="http://www.csser.com/board/4f53875c55bdcb545c000d05">配置 Git 和 SSH 密钥连接 Github - CSSer</a></p>

<p><a href="http://www.cnblogs.com/cheche/archive/2011/01/07/1918825.html">解决cygwin下的“Could not open a connection to your authentication agent.”</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[codeHighlight]]></title>
    <link href="http://whbzju.github.com/blog/2013/01/30/codehighlight/"/>
    <updated>2013-01-30T15:47:00+08:00</updated>
    <id>http://whbzju.github.com/blog/2013/01/30/codehighlight</id>
    <content type="html"><![CDATA[<h1>代码高亮</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$sudo give me a hug for test
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>test</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;Hello world&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Discover if a number is prime</span><a href='http://www.noulakaz.net/weblog/2007/03/18/a-regular-expression-to-check-for-prime-numbers/'>Source Article</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="k">class</span> <span class="nc">Fixnum</span>
</span><span class='line'>   <span class="k">def</span> <span class="nf">prime?</span>
</span><span class='line'>     <span class="p">(</span><span class="s1">&#39;1&#39;</span> <span class="o">*</span> <span class="nb">self</span><span class="p">)</span> <span class="o">!~</span> <span class="sr">/^1?$|^(11+?)\1+$/</span>
</span><span class='line'>   <span class="k">end</span>
</span><span class='line'> <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Code Block</h2>

<figure class='code'><figcaption><span>testTitle  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Hello octopress&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Javascript Array Syntax </span><a href='http://j.mp/pPUUmW'>MDN Documentation </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">arr1</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">arrayLength</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">arr2</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">element0</span><span class="p">,</span> <span class="nx">element1</span><span class="p">,</span> <span class="p">...,</span> <span class="nx">elementN</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello octopress]]></title>
    <link href="http://whbzju.github.com/blog/2013/01/30/hello-octopress/"/>
    <updated>2013-01-30T15:27:00+08:00</updated>
    <id>http://whbzju.github.com/blog/2013/01/30/hello-octopress</id>
    <content type="html"><![CDATA[<h1>Hello Octopress</h1>

<p>This is my first octopress blog, just for test.</p>

<h2>中文</h2>

<p>try chinese</p>

<h2>code</h2>

<h1>include &lt;stdio.h></h1>

<p>int main()
{</p>

<pre><code>printf("Hello world\n");
return 0;
</code></pre>

<p>}</p>
]]></content>
  </entry>
  
</feed>
